// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
    id          Int         @id @default(autoincrement())
    name        String?
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    content     String

    createdBy   User        @relation(fields: [createdById], references: [clerkId])
    createdById String

    comments    Comment[]
    likes       Like[]
    shares      Share[]

    @@index([name])
}

model User {
    id            String    @id @default(cuid())
    clerkId       String    @unique
    userName      String    @unique
    fullName      String?
    email         String?   @unique
    image         String?
    bio           String?
    sessions      Session[]
    posts         Post[]
    comments      Comment[]
    likes         Like[]
    shares        Share[]
    followers     Follow[]  @relation("FollowerRelation")
    following     Follow[]  @relation("FollowingRelation")
    chats         Chat[]    @relation("UserChats")
    messages      Message[]
}

model Comment {
    id        Int      @id @default(autoincrement())
    content   String
    createdAt DateTime @default(now())
    post      Post     @relation(fields: [postId], references: [id])
    postId    Int
    createdBy User     @relation(fields: [createdById], references: [id])
    createdById String
}

model Like {
    id        Int      @id @default(autoincrement())
    post      Post     @relation(fields: [postId], references: [id])
    postId    Int
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())

    @@unique([postId, userId]) // A user can like a post only once
}

model Share {
    id        Int      @id @default(autoincrement())
    post      Post     @relation(fields: [postId], references: [id])
    postId    Int
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())

    @@unique([postId, userId]) // A user can share a post only once
}

// // Necessary for Next auth
// model Account {
//     id                       String  @id @default(cuid())
//     userId                   String
//     type                     String
//     provider                 String
//     providerAccountId        String
//     refresh_token            String? // @db.Text
//     access_token             String? // @db.Text
//     expires_at               Int?
//     token_type               String?
//     scope                    String?
//     id_token                 String? // @db.Text
//     session_state            String?
//     user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//     refresh_token_expires_in Int?

//     @@unique([provider, providerAccountId])
// }

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Follow {
  id            Int         @id @default(autoincrement())
  follower      User        @relation("FollowerRelation", fields: [followerId], references: [id])
  followerId    String
  following     User        @relation("FollowingRelation", fields: [followingId], references: [id])
  followingId   String
  createdAt     DateTime    @default(now())

  @@unique([followerId, followingId]) // Prevent duplicate follows
}

model Chat {
  id            Int         @id @default(autoincrement())
  participants  User[]      @relation("UserChats")
  messages      Message[]
  createdAt     DateTime    @default(now())
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  sentAt    DateTime @default(now())
}